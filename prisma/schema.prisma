generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String
  password  String
  role      String   @default("EMPLOYEE")
  companyId String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  company   Company? @relation(fields: [companyId], references: [id])

  @@map("users")
}

model Company {
  id               String       @id @default(cuid())
  name             String
  cnpj             String       @unique
  email            String
  phone            String?
  address          String?
  employeeLimit    Int          @default(10)
  currentEmployees Int          @default(0)
  isActive         Boolean      @default(true)
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
  contracts        Contract[]
  dismissals       Dismissal[]
  employees        Employee[]
  entries          Entry[]
  suspensions      Suspension[]
  users            User[]
  vacations        Vacation[]
  warnings         Warning[]

  @@map("companies")
}

model Employee {
  id          String       @id @default(cuid())
  name        String
  cpf         String       @unique
  email       String?
  phone       String?
  position    String
  department  String?
  salary      Float?
  hireDate    DateTime
  birthDate   DateTime?
  address     String?
  isActive    Boolean      @default(true)
  companyId   String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  contracts   Contract[]
  dismissals  Dismissal[]
  company     Company      @relation(fields: [companyId], references: [id])
  entries     Entry[]
  suspensions Suspension[]
  vacations   Vacation[]
  warnings    Warning[]

  @@map("employees")
}

model Vacation {
  id         String   @id @default(cuid())
  employeeId String
  companyId  String
  startDate  DateTime
  endDate    DateTime
  days       Int
  status     String   @default("PENDING")
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  company    Company  @relation(fields: [companyId], references: [id])
  employee   Employee @relation(fields: [employeeId], references: [id])

  @@map("vacations")
}

model Warning {
  id         String   @id @default(cuid())
  employeeId String
  companyId  String
  type       String
  reason     String
  date       DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  company    Company  @relation(fields: [companyId], references: [id])
  employee   Employee @relation(fields: [employeeId], references: [id])

  @@map("warnings")
}

model Suspension {
  id         String   @id @default(cuid())
  employeeId String
  companyId  String
  reason     String
  startDate  DateTime
  endDate    DateTime
  days       Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  company    Company  @relation(fields: [companyId], references: [id])
  employee   Employee @relation(fields: [employeeId], references: [id])

  @@map("suspensions")
}

model Dismissal {
  id         String   @id @default(cuid())
  employeeId String
  companyId  String
  reason     String
  date       DateTime
  type       String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  company    Company  @relation(fields: [companyId], references: [id])
  employee   Employee @relation(fields: [employeeId], references: [id])

  @@map("dismissals")
}

model Contract {
  id         String    @id @default(cuid())
  employeeId String
  companyId  String
  type       String
  startDate  DateTime
  endDate    DateTime?
  salary     Float?
  position   String
  isActive   Boolean   @default(true)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  company    Company   @relation(fields: [companyId], references: [id])
  employee   Employee  @relation(fields: [employeeId], references: [id])

  @@map("contracts")
}

model Entry {
  id          String   @id @default(cuid())
  employeeId  String
  companyId   String
  type        String
  amount      Float
  description String?
  date        DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  company     Company  @relation(fields: [companyId], references: [id])
  employee    Employee @relation(fields: [employeeId], references: [id])

  @@map("entries")
}
